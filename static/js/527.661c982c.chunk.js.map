{"version":3,"file":"static/js/527.661c982c.chunk.js","mappings":"sMAKA,MAUA,EAVqBA,IAAiC,IAAhC,QAAEC,EAAU,cAAcD,EAC5C,OAEIE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aACfE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,WAAY,IAAKC,GAAI,CAAEC,SAAU,CAAEC,GAAI,MAAOC,GAAI,SAAYC,EAAE,OAAOC,UAAU,SAAQT,SAAEJ,MACrG,C,2ICPd,MAiCA,EAjCiBD,IAAsC,IAArC,KAAEe,EAAI,YAAEC,EAAW,SAAEC,GAAUjB,EAG7C,OACIM,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACIC,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CACFf,UAAU,gBAAgBgB,KAAK,SAASC,WAAW,SAASC,eAAe,SAC3Eb,GAAI,CAEAc,OAAQ,GAAY,QAATR,EAAiB,MAAQ,eAAeS,EAAAA,IACnDC,UAAWR,IAAaF,EAAO,aAAaS,EAAAA,IAAiB,GAC7DE,aAAcT,IAAaF,EAAO,aAAaS,EAAAA,IAAiB,GAChEG,WAAY,OACZC,uBAAwB,OACxBC,qBAAsB,OACtBC,MAAO,QACPC,OAAQ,QACRC,OAAQ,UACRC,IAAK,QAETC,QAASA,KAELlB,EAAYD,GACZoB,OAAOC,SAAS,CAAEC,IAAK,KAAMC,KAAM,IAAKC,SAAU,UAAW,EAC/DlC,UAGFH,EAAAA,EAAAA,MAACK,EAAAA,EAAU,CAACO,UAAU,SAASJ,SAAS,OAAOF,WAAW,OAAOgC,MAAM,UAAUC,cAAc,aAAYpC,SAAA,CAAEU,EAAK,UAEvH,E,aC5BX,MA6BA,EA7BgCf,IAAsC,IAArC,KAAE0C,EAAI,YAAE1B,EAAW,SAAEC,GAAUjB,EAM5D,OACIM,EAAAA,EAAAA,KAACqC,EAAAA,WAAU,CAAAtC,SAENqC,EAAKE,KAAK7B,IACAT,EAAAA,EAAAA,KAACH,EAAAA,EAAG,CAEP0C,OAAQ9B,EAAK+B,IAAM/B,EACnBgC,MAAOhC,EAAK+B,IAAM/B,EAClBF,EAAE,YAAWR,UACbC,EAAAA,EAAAA,KAAC0C,EAAQ,CACLjC,KAAMA,EACNC,YAAaA,EACbC,SAAUA,KAPTF,EAAK+B,IAAM/B,MAcf,E,wBCarB,MCkFA,EApHwBf,IAA8C,IAA7C,aAAEiD,EAAY,SAAEhC,EAAQ,YAAED,GAAahB,EAE5D,MAAOkD,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAEvCK,EAAAA,EAAAA,YAAU,KAcmB,IAArBJ,EAAUK,QAbYC,WAEtB,MAAMC,QAAsBC,EAAAA,EAAAA,IACxB,GAAGC,EAAAA,2BACHC,EAAAA,GACA,KAGkB,OAAlBH,GAA0BA,EAAcF,OAAS,GACjDJ,EAAa,CAAC,SAAUM,GAE5B,EAGAI,EACJ,GACD,IAsCH,OACI9D,EAAAA,EAAAA,MAACiB,EAAAA,EAAK,CAACE,WAAW,SAAS4C,GAAG,OAAO3C,eAAe,SAAS4C,EAAE,OAAM7D,SAAA,EACjEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,WAAY,IAAKC,GAAI,CAAEC,SAAU,CAAEC,GAAI,MAAOC,GAAI,SAAYuD,GAAG,OAAOrD,UAAU,SAAQT,SAC1D,sDAI5CH,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACiE,SAAS,WAAWD,GAAG,OAAM9D,SAAA,EAC9BC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAS,CACN5D,GAAI,CACA6D,MAAO,CACH9D,WAAY,MACZe,OAAQ,OACRgD,aAAc,OAElBzC,MAAO,CAAEnB,GAAI,QAAS6D,GAAI,QAAS5D,GAAI,SACvC6D,gBAAiB,OACjBC,cAAe,QAEnB3C,OAAO,OACP4C,MAAOzB,EACP0B,SAAWC,GAAM1B,EAAU0B,EAAEC,OAAOH,MAAMI,eAC1CC,YAAY,mBACZ5D,KAAK,UAETd,EAAAA,EAAAA,KAAC2E,EAAAA,EAAM,CAAC7E,UAAU,aACdK,GAAI,CACAyE,QAAS1D,EAAAA,EACTgB,MAAO,OACPC,cAAe,OACfX,MAAO,CAAEnB,GAAI,QAASC,GAAI,QAC1BF,SAAU,CAAEC,GAAI,OAAQC,GAAI,QAC5BmB,OAAQ,OACRqC,SAAU,WACVe,MAAO,KAEXjD,QAlEKyB,UAGjB,GAAIT,EAAQ,CACRM,GAAW,GACX,MAAM4B,QAAsBvB,EAAAA,EAAAA,IACxB,GAAGC,EAAAA,cACHC,EAAAA,GACA,KAEJ,IACI,MAAMsB,EAAyBD,EAAcE,QACxCC,GAAaA,EAASC,KAAKT,cAAcU,SAASvC,EAAO6B,gBACtDQ,EAAST,OAAOC,cAAcU,SAASvC,IACvCqC,EAASG,UAAUX,cAAcU,SAASvC,IAC1CqC,EAAStE,SAAS8D,cAAcU,SAASvC,KAEjDC,EAAU,IAEVF,EAAaoC,GACb7B,GAAW,EACf,CAAE,MAAOmC,GACLC,QAAQD,MAAM,4CAA0CA,GACxDnC,GAAW,EACf,CACJ,GAyCkCnD,SAAC,cAI9BkD,GACKjD,EAAAA,EAAAA,KAACuF,EAAAA,QAAY,CAAC5F,QAAQ,kCACtBK,EAAAA,EAAAA,KAACH,EAAAA,EAAG,CAACM,GAAI,CAAE2D,SAAU,WAAYtC,MAAO,OAAQoC,EAAG,OAAQnC,OAAQ,QAAS1B,UAC1EC,EAAAA,EAAAA,KAACwF,EAAuB,CACpBpD,KAAMW,EACNpC,SAAUA,EACVD,YAAaA,QAKrB,C,yCCvHT,MAAMQ,EAAe,UACfuE,EAAmB,W,0CCHzB,MAAMjC,EAAgB,oCAChBkC,EAA0B,oD,qDCDhC,MAAMjC,EAAkB,CAC3BkC,OAAQ,MACRC,QAAS,CACL,iBAAkBC,qDAClB,kBAAmB,8BAIdC,EAAwB,CACjCH,OAAQ,MACRC,QAAS,CACL,iBAAkBC,qDAClB,kBAAmB,+CAKdtC,EAAYF,eAAO0C,EAAKC,GAAyB,IAAhBC,EAAKC,UAAA9C,OAAA,QAAA+C,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAElD,IACI,MAAME,QAAiBC,MAAMN,EAAM,UAAUE,aAAkBD,GAG/D,aAFmBI,EAASE,MAIhC,CAAE,MAAOjB,GAGL,OAFAC,QAAQiB,IAAIlB,GAEL,EACX,CACJ,C","sources":["Components/ScreenLoader.js","Components/BodyPart.js","Components/HorizontalCardScrollbar.js","Hooks/useFetchData.js","Components/SearchExercises.js","constants/color_constatnts.js","constants/url_constants.js","utils/fetchData.js"],"sourcesContent":["import React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\nimport '../../src/App.css'\r\n\r\n\r\nconst ScreenLoader = ({ message = \"Loading...\" }) => {\r\n    return (\r\n\r\n        <Box className=\"loading-container\" >\r\n            <div className=\"spinner\"></div>\r\n            <Typography fontWeight={700} sx={{ fontSize: { lg: '20x', xs: '15px' } }} m='10px' textAlign='center'>{message}</Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ScreenLoader;\r\n","import React from 'react';\r\nimport { Stack, Typography } from '@mui/material';\r\n// import GymIcon from '../assets/icons/gym.png';\r\nimport { primaryColor } from '../constants';\r\nconst BodyPart = ({ item, setBodyPart, bodyPart }) => {\r\n    // console.log(\"item from body part component----->\", item);\r\n\r\n    return (\r\n        <>\r\n            <Stack\r\n                className='bodyPart-card' type='button' alignItems='center' justifyContent='center'\r\n                sx={{\r\n                    // border: item.item == 'all' ? `2px solid ${primaryColor}` : `1px solid ${primaryColor}`,\r\n                    border: `${item === 'all' ? '2px' : '1px'} solid ${primaryColor}`,\r\n                    borderTop: bodyPart === item ? `4px solid ${primaryColor}` : '',\r\n                    borderBottom: bodyPart === item ? `4px solid ${primaryColor}` : '',\r\n                    background: '#FFF',\r\n                    borderBottomLeftRadius: '30px',\r\n                    borderTopRightRadius: '30px',\r\n                    width: '150px',\r\n                    height: '100px',\r\n                    cursor: 'pointer',\r\n                    gap: '47px',\r\n                }}\r\n                onClick={() => {\r\n                    // console.log(typeof setBodyPart);\r\n                    setBodyPart(item);\r\n                    window.scrollBy({ top: 1800, left: 100, behavior: 'smooth' });\r\n                }}\r\n            >\r\n                {/* <image src={GymIcon} color='red' alt='dumbbell' style={{ with: '20px', height: '20px' }} /> */}\r\n                <Typography textAlign='center' fontSize='27px' fontWeight='bold' color='#3a1212' textTransform='capitalize'>{item} </Typography>\r\n            </Stack >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BodyPart","import React from 'react';\r\nimport { Box } from '@mui/material'\r\nimport BodyPart from './BodyPart'\r\nimport { ScrollMenu, VisibilityContext } from 'react-horizontal-scrolling-menu';\r\n\r\nconst HorizontalCardScrollbar = ({ data, setBodyPart, bodyPart }) => {\r\n    // console.log(\"data-HorizontalCardScrollbar--\", data);\r\n    // console.log(\"bodyPart---\", bodyPart);\r\n    // console.log(\"data---typeof\", typeof data);\r\n\r\n\r\n    return (\r\n        <ScrollMenu>\r\n\r\n            {data.map((item) => {\r\n                return <Box\r\n                    key={item.id || item}\r\n                    itemID={item.id || item}\r\n                    title={item.id || item}\r\n                    m='20px 40px'>\r\n                    <BodyPart\r\n                        item={item}\r\n                        setBodyPart={setBodyPart}\r\n                        bodyPart={bodyPart}\r\n                    />\r\n\r\n                </Box>\r\n            })}\r\n\r\n\r\n        </ScrollMenu>\r\n    )\r\n}\r\n\r\nexport default HorizontalCardScrollbar","// useApiData.js\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook to fetch data from an API and store/retrieve it from localStorage.\r\n * @param {string} key - The key for localStorage where the API response will be stored.\r\n * @param {string} url - The API URL to fetch data from.\r\n * @returns {Array} - [data, isLoading, error]\r\n */\r\nfunction useFetchData(key, url) {\r\n    const [data, setData] = useState(null);  // State to store the API data\r\n    const [isLoading, setIsLoading] = useState(true);  // State to track loading status\r\n    const [error, setError] = useState(null);  // State to track any errors\r\n\r\n    useEffect(() => {\r\n        // First, check if the data exists in localStorage\r\n        const storedData = localStorage.getItem(key);\r\n\r\n        if (storedData) {\r\n            // If data is in localStorage, use it\r\n            setData(JSON.parse(storedData));\r\n            setIsLoading(false);  // No need to load data from the API\r\n        } else {\r\n            // If no data in localStorage, fetch from API\r\n            fetch(url + `?limit=100&offset=0`)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    // Save the API response in localStorage\r\n                    localStorage.setItem(key, JSON.stringify(data));\r\n                    setData(data);  // Update state with API data\r\n                    setIsLoading(false);  // Set loading to false\r\n                })\r\n                .catch((err) => {\r\n                    setError(err);  // Set error if API request fails\r\n                    setIsLoading(false);  // Set loading to false\r\n                });\r\n        }\r\n    }, [key, url]);  // Run effect when key or url changes\r\n\r\n    return [data, isLoading, error];\r\n}\r\n\r\nexport default useFetchData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Box, Button, Stack, TextField, Typography } from '@mui/material'\r\nimport { primaryColor, exercisedbURL } from '../constants';\r\nimport HorizontalCardScrollbar from './HorizontalCardScrollbar';\r\nimport { exerciseOptions, fetchData } from '../utils/fetchData';\r\nimport ScreenLoader from './ScreenLoader'\r\nimport useFetchData from '../Hooks/useFetchData';\r\nimport { useLocalStorage } from '../Hooks/useLocalStorage';\r\n\r\nconst SearchExercises = ({ setExercises, bodyPart, setBodyPart }) => {\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [bodyParts, setBodyParts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchExerciseData = async () => {\r\n\r\n            const bodyPartsData = await fetchData(\r\n                `${exercisedbURL}/exercises/bodyPartList`,\r\n                exerciseOptions,\r\n                100,\r\n            );\r\n\r\n            if (bodyPartsData !== null && bodyPartsData.length > 0) {\r\n                setBodyParts(['all', ...bodyPartsData]);\r\n            } else {\r\n            }\r\n        };\r\n        if (bodyParts.length === 0) { // fetch only once\r\n            fetchExerciseData();\r\n        }\r\n    }, []);\r\n\r\n    // const [localData, setLocalData] = useLocalStorage('exercise', [1, 2, 3])\r\n    // console.log(\"localData : \", localData);\r\n\r\n\r\n    // const [data, loading, error] = useFetchData(\"exercise\", `${exercisedbURL}/exercises/bodyPartList`,);\r\n\r\n    const handleSearch = async () => {\r\n\r\n        //setLocalData((previousData) => [...previousData, 4, 5, 6]);\r\n        if (search) {\r\n            setLoading(true);\r\n            const exercisesData = await fetchData(\r\n                `${exercisedbURL}/exercises`,\r\n                exerciseOptions,\r\n                100,\r\n            );\r\n            try {\r\n                const searchResusltExercises = exercisesData.filter(\r\n                    (exercise) => exercise.name.toLowerCase().includes(search.toLowerCase()) ||\r\n                        exercise.target.toLowerCase().includes(search) ||\r\n                        exercise.equipment.toLowerCase().includes(search) ||\r\n                        exercise.bodyPart.toLowerCase().includes(search)\r\n                );\r\n                setSearch(''); // clear search field \r\n\r\n                setExercises(searchResusltExercises); // setting the response data\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error(\"error searchResusltExercises -------->\", error);\r\n                setLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Stack alignItems='center' mt='37px' justifyContent='center' p='20px'>\r\n            <Typography fontWeight={700} sx={{ fontSize: { lg: '35x', xs: '25px' } }} mb='50px' textAlign='center'>\r\n                {/* Awesome exercises youshould know */}\r\n                Exercises That Will Elevate Your Fitness Journey\r\n                {/* : {localData} */}\r\n            </Typography>\r\n            <Box position='relative' mb='72px'>\r\n                <TextField\r\n                    sx={{\r\n                        input: {\r\n                            fontWeight: '700',\r\n                            border: 'none',\r\n                            borderRadius: '4px'\r\n                        },\r\n                        width: { lg: '800px', md: '700px', xs: '350px' },\r\n                        backgroundColor: '#fff',\r\n                        borderRadiusa: '40px',\r\n                    }}\r\n                    height='76px'\r\n                    value={search}\r\n                    onChange={(e) => setSearch(e.target.value.toLowerCase())}\r\n                    placeholder='Search Exercises'\r\n                    type='text'\r\n                />\r\n                <Button className='search-btn'\r\n                    sx={{\r\n                        bgcolor: primaryColor,\r\n                        color: '#fff',\r\n                        textTransform: 'none',\r\n                        width: { lg: \"175px\", xs: '80px' },\r\n                        fontSize: { lg: \"20px\", xs: '14px' },\r\n                        height: '56px',\r\n                        position: 'absolute',\r\n                        right: '0'\r\n                    }}\r\n                    onClick={handleSearch}>\r\n                    Search\r\n                </Button>\r\n            </Box>\r\n            {loading\r\n                ? <ScreenLoader message=\"Please wait while loading...\" />\r\n                : <Box sx={{ position: 'relative', width: '100%', p: '20px', height: '80px' }}>\r\n                    <HorizontalCardScrollbar\r\n                        data={bodyParts}\r\n                        bodyPart={bodyPart}\r\n                        setBodyPart={setBodyPart}\r\n                    />\r\n\r\n                </Box>\r\n            }\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default SearchExercises","// export const primaryColor = '#ff2625';\r\n// export const primaryColor = '#4894ff';\r\nexport const primaryColor = '#7ebddd';\r\nexport const primaryColorFade = '#7ebddd85';","export const exercisedbURL = 'https://exercisedb.p.rapidapi.com';\r\nexport const exerciseYoutubeVideoURL = 'https://youtube-search-and-download.p.rapidapi.com';\r\n","export const exerciseOptions = {\r\n    method: 'GET',\r\n    headers: {\r\n        'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY_FOR_EXERCISEDB,\r\n        'x-rapidapi-host': 'exercisedb.p.rapidapi.com'\r\n    }\r\n};\r\n\r\nexport const exerciseYotubeOptions = {\r\n    method: 'GET',\r\n    headers: {\r\n        'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY_FOR_EXERCISEDB,\r\n        'x-rapidapi-host': 'youtube-search-and-download.p.rapidapi.com'\r\n    }\r\n};\r\n\r\n\r\nexport const fetchData = async (url, options, limit = 50) => {\r\n\r\n    try {\r\n        const response = await fetch(url + `?limit=${limit}&offset=0`, options);\r\n        const data = await response.json();\r\n        // console.error(\"result size:\", data.length);\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return [];\r\n    }\r\n};"],"names":["_ref","message","_jsxs","Box","className","children","_jsx","Typography","fontWeight","sx","fontSize","lg","xs","m","textAlign","item","setBodyPart","bodyPart","_Fragment","Stack","type","alignItems","justifyContent","border","primaryColor","borderTop","borderBottom","background","borderBottomLeftRadius","borderTopRightRadius","width","height","cursor","gap","onClick","window","scrollBy","top","left","behavior","color","textTransform","data","ScrollMenu","map","itemID","id","title","BodyPart","setExercises","search","setSearch","useState","bodyParts","setBodyParts","loading","setLoading","useEffect","length","async","bodyPartsData","fetchData","exercisedbURL","exerciseOptions","fetchExerciseData","mt","p","mb","position","TextField","input","borderRadius","md","backgroundColor","borderRadiusa","value","onChange","e","target","toLowerCase","placeholder","Button","bgcolor","right","exercisesData","searchResusltExercises","filter","exercise","name","includes","equipment","error","console","ScreenLoader","HorizontalCardScrollbar","primaryColorFade","exerciseYoutubeVideoURL","method","headers","process","exerciseYotubeOptions","url","options","limit","arguments","undefined","response","fetch","json","log"],"sourceRoot":""}